[project]
name = "codeplag"
version = "0.5.16"
description = "Code plagiarism searching package."
readme = "README.md"
requires-python = "~=3.10"

[tool.ruff]
builtins = ["_"]
line-length = 99
lint.select = [
    "D", # pydocstyle
    "F",    # pyflakes
    "E",    # pycodestyle Error
    "W",    # pycodestyle Warning
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "ANN",  # flake8-annotations
    "SIM",  # flake8-simplify
    "ERA",  # eradicate
    "C90",  # mccabe
]
lint.ignore = [
    "ANN003",  # missing type annotations for `*kwargs`
    "ANN102",
    "ANN201",
    "ANN204",
    "ANN401",  # dynamically typed expressions (typing.Any)
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
]
lint.exclude = ["*.ipynb"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.format]
exclude = ["*.ipynb"]

[tool.pyright]
pythonVersion = "3.10"

include = [
    "src",
    "docs/notebooks"
]

executionEnvironments = [
    { root = "src" },
    { root = "docs/notebooks", extraPaths = ["src"] }
]

typeCheckingMode = "basic"

[build-system]
requires = ["setuptools", "Cython"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
include_namespace_packages = true
precision = 2

[tool.coverage.xml]
output = "test/unit/pytest-coverage.xml"

[tool.pytest.ini_options]
addopts = "-vv"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = [
    "src",
]
