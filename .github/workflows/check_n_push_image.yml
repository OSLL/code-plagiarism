# Check source code with use of linters
# Build Docker Image, run tests and autotests on a container based on the created image
# Push created image on the Docker Hub
name: Check, build, test, push

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'

  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'

  workflow_dispatch:

jobs:
  check-code:
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.6
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Lint with flake8
      run: |
        pip install flake8 flake8-bugbear
        flake8 src/ --statistic --max-line-length=100 -qq

  docker-build-test-autotest:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Build docker image
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          echo "ACCESS_TOKEN = '${ACCESS_TOKEN}'" > .env
          make docker

      - name: Run tests in the docker container based on the created image
        run: |
          make docker-test

      - name: Run autotests in the docker container based on the created image
        run: |
          make docker-autotest

  push-image:
    runs-on: ubuntu-18.04
    needs: [check-code, docker-build-test-autotest]
    if: github.ref == 'refs/heads/main'

    steps:
          -
            name: Checkout
            uses: actions/checkout@v2
          -
            name: Login to Docker Hub
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_HUB_USERNAME }}
              password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          -
            name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          -
            name: Get current util version
            id: get_version
            run: |
              echo "::set-output name=version::$(grep --max-count 1 UTIL_VERSION Makefile | grep -Eo "[0-9]+[.][0-9]+[.][0-9]+")"
          -
            name: Build and push
            uses: docker/build-push-action@v2
            with:
              context: ./
              file: ./Dockerfile
              builder: ${{ steps.buildx.outputs.name }}
              push: true
              tags: |
                ${{ secrets.DOCKER_HUB_USERNAME }}/code-plagiarism-ubuntu18.04:latest
                ${{ secrets.DOCKER_HUB_USERNAME }}/code-plagiarism-ubuntu18.04:${{ steps.get_version.outputs.version }}
              cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/code-plagiarism-ubuntu18.04:buildcache
              cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/code-plagiarism-ubuntu18.04:buildcache,mode=max
